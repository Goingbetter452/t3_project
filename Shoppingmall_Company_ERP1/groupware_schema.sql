-- 그룹웨어 시스템을 위한 데이터베이스 테이블 생성 스크립트

-- 1. 공지사항 테이블
CREATE TABLE NOTICES (
    NOTICE_ID NUMBER PRIMARY KEY,
    TITLE VARCHAR2(200) NOT NULL,
    CONTENT CLOB NOT NULL,
    AUTHOR_ID VARCHAR2(50) NOT NULL,
    AUTHOR_NAME VARCHAR2(100) NOT NULL,
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE,
    VIEW_COUNT NUMBER DEFAULT 0,
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N'))
);

-- 2. 할일 목록 테이블
CREATE TABLE TODOS (
    TODO_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    IS_COMPLETED CHAR(1) DEFAULT 'N' CHECK (IS_COMPLETED IN ('Y', 'N')),
    PRIORITY NUMBER DEFAULT 3 CHECK (PRIORITY BETWEEN 1 AND 5), -- 1:높음, 3:보통, 5:낮음
    DUE_DATE DATE,
    CREATE_DATE DATE DEFAULT SYSDATE,
    COMPLETE_DATE DATE
);

-- 3. 출퇴근 관리 테이블
CREATE TABLE ATTENDANCE (
    ATTENDANCE_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    WORK_DATE DATE NOT NULL,
    CHECK_IN_TIME TIMESTAMP,
    CHECK_OUT_TIME TIMESTAMP,
    TOTAL_WORK_MINUTES NUMBER,
    BREAK_MINUTES NUMBER DEFAULT 0,
    OVERTIME_MINUTES NUMBER DEFAULT 0,
    STATUS VARCHAR2(20) DEFAULT 'ABSENT' CHECK (STATUS IN ('PRESENT', 'ABSENT', 'LATE', 'EARLY_LEAVE')),
    NOTES VARCHAR2(500),
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE
);

-- 4. 메신저 메시지 테이블
CREATE TABLE MESSAGES (
    MESSAGE_ID NUMBER PRIMARY KEY,
    SENDER_ID VARCHAR2(50) NOT NULL,
    SENDER_NAME VARCHAR2(100) NOT NULL,
    RECEIVER_ID VARCHAR2(50),
    RECEIVER_NAME VARCHAR2(100),
    MESSAGE_TYPE VARCHAR2(20) DEFAULT 'PERSONAL' CHECK (MESSAGE_TYPE IN ('PERSONAL', 'GROUP', 'BROADCAST')),
    CONTENT VARCHAR2(1000) NOT NULL,
    IS_READ CHAR(1) DEFAULT 'N' CHECK (IS_READ IN ('Y', 'N')),
    SEND_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    READ_DATE TIMESTAMP
);

-- 5. 캘린더 일정 테이블
CREATE TABLE CALENDAR_EVENTS (
    EVENT_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    EVENT_TYPE VARCHAR2(20) DEFAULT 'PERSONAL' CHECK (EVENT_TYPE IN ('PERSONAL', 'MEETING', 'HOLIDAY', 'COMPANY')),
    START_DATE TIMESTAMP NOT NULL,
    END_DATE TIMESTAMP NOT NULL,
    IS_ALL_DAY CHAR(1) DEFAULT 'N' CHECK (IS_ALL_DAY IN ('Y', 'N')),
    LOCATION VARCHAR2(200),
    REMINDER_MINUTES NUMBER DEFAULT 0,
    IS_RECURRING CHAR(1) DEFAULT 'N' CHECK (IS_RECURRING IN ('Y', 'N')),
    RECURRENCE_PATTERN VARCHAR2(100),
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE
);

-- 6. 파일 첨부 테이블 (공지사항, 메시지 등에서 사용)
CREATE TABLE ATTACHMENTS (
    ATTACHMENT_ID NUMBER PRIMARY KEY,
    RELATED_TYPE VARCHAR2(20) NOT NULL CHECK (RELATED_TYPE IN ('NOTICE', 'MESSAGE', 'EVENT')),
    RELATED_ID NUMBER NOT NULL,
    ORIGINAL_NAME VARCHAR2(255) NOT NULL,
    STORED_NAME VARCHAR2(255) NOT NULL,
    FILE_PATH VARCHAR2(500) NOT NULL,
    FILE_SIZE NUMBER NOT NULL,
    CONTENT_TYPE VARCHAR2(100),
    UPLOAD_DATE DATE DEFAULT SYSDATE,
    UPLOADER_ID VARCHAR2(50) NOT NULL
);

-- 시퀀스 생성
CREATE SEQUENCE SEQ_NOTICE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_TODO_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_ATTENDANCE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_MESSAGE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_EVENT_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_ATTACHMENT_ID START WITH 1 INCREMENT BY 1 NOCACHE;

-- 인덱스 생성 (성능 향상을 위해)
CREATE INDEX IDX_NOTICES_AUTHOR ON NOTICES(AUTHOR_ID);
CREATE INDEX IDX_NOTICES_DATE ON NOTICES(CREATE_DATE);
CREATE INDEX IDX_TODOS_USER ON TODOS(USER_ID);
CREATE INDEX IDX_TODOS_DATE ON TODOS(CREATE_DATE);
CREATE INDEX IDX_ATTENDANCE_USER_DATE ON ATTENDANCE(USER_ID, WORK_DATE);
CREATE INDEX IDX_MESSAGES_SENDER ON MESSAGES(SENDER_ID);
CREATE INDEX IDX_MESSAGES_RECEIVER ON MESSAGES(RECEIVER_ID);
CREATE INDEX IDX_MESSAGES_DATE ON MESSAGES(SEND_DATE);
CREATE INDEX IDX_EVENTS_USER ON CALENDAR_EVENTS(USER_ID);
CREATE INDEX IDX_EVENTS_DATE ON CALENDAR_EVENTS(START_DATE);

-- 트리거 생성

-- 1. 공지사항 업데이트 시 UPDATE_DATE 자동 갱신
CREATE OR REPLACE TRIGGER TRG_NOTICES_UPDATE
    BEFORE UPDATE ON NOTICES
    FOR EACH ROW
BEGIN
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 2. 출퇴근 시간 계산 트리거
CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_CALC
    BEFORE INSERT OR UPDATE ON ATTENDANCE
    FOR EACH ROW
BEGIN
    -- 출근과 퇴근 시간이 모두 있을 때 총 근무시간 계산
    IF :NEW.CHECK_IN_TIME IS NOT NULL AND :NEW.CHECK_OUT_TIME IS NOT NULL THEN
        :NEW.TOTAL_WORK_MINUTES := EXTRACT(DAY FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME)) * 24 * 60 +
                                   EXTRACT(HOUR FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME)) * 60 +
                                   EXTRACT(MINUTE FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME));
        
        -- 8시간(480분) 초과 시 초과근무시간 계산
        IF :NEW.TOTAL_WORK_MINUTES > 480 THEN
            :NEW.OVERTIME_MINUTES := :NEW.TOTAL_WORK_MINUTES - 480;
        ELSE
            :NEW.OVERTIME_MINUTES := 0;
        END IF;
        
        -- 출근 상태 결정 (9시 이후 출근은 지각)
        IF EXTRACT(HOUR FROM :NEW.CHECK_IN_TIME) >= 9 THEN
            :NEW.STATUS := 'LATE';
        ELSE
            :NEW.STATUS := 'PRESENT';
        END IF;
        
        -- 조기퇴근 체크 (18시 이전 퇴근)
        IF EXTRACT(HOUR FROM :NEW.CHECK_OUT_TIME) < 18 THEN
            :NEW.STATUS := 'EARLY_LEAVE';
        END IF;
    END IF;
    
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 3. 메시지 읽음 처리 트리거
CREATE OR REPLACE TRIGGER TRG_MESSAGE_READ
    BEFORE UPDATE ON MESSAGES
    FOR EACH ROW
BEGIN
    -- 읽음 상태가 N에서 Y로 변경될 때 읽은 시간 설정
    IF :OLD.IS_READ = 'N' AND :NEW.IS_READ = 'Y' THEN
        :NEW.READ_DATE := CURRENT_TIMESTAMP;
    END IF;
END;
/

-- 4. 캘린더 이벤트 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_EVENTS_UPDATE
    BEFORE UPDATE ON CALENDAR_EVENTS
    FOR EACH ROW
BEGIN
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 샘플 데이터 삽입

-- 공지사항 샘플 데이터
INSERT INTO NOTICES (NOTICE_ID, TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME) VALUES 
(SEQ_NOTICE_ID.NEXTVAL, '시스템 점검 안내', '다음 주 토요일 오후 2시부터 4시까지 시스템 점검이 있을 예정입니다.', 'admin', '관리자');

INSERT INTO NOTICES (NOTICE_ID, TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME) VALUES 
(SEQ_NOTICE_ID.NEXTVAL, '신입사원 환영회', '이번 달 말에 신입사원 환영회를 개최합니다. 많은 참석 부탁드립니다.', 'hr001', '인사팀');

-- 할일 목록 샘플 데이터
INSERT INTO TODOS (TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY, DUE_DATE) VALUES 
(SEQ_TODO_ID.NEXTVAL, 'emp001', '월간 보고서 작성', '이번 달 업무 성과 보고서 작성', 2, SYSDATE + 7);

INSERT INTO TODOS (TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY) VALUES 
(SEQ_TODO_ID.NEXTVAL, 'emp001', '회의실 예약', '내일 오후 회의를 위한 회의실 예약', 1);

-- 캘린더 이벤트 샘플 데이터
INSERT INTO CALENDAR_EVENTS (EVENT_ID, USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE) VALUES 
(SEQ_EVENT_ID.NEXTVAL, 'emp001', '팀 회의', '주간 팀 회의', 'MEETING', 
 TO_TIMESTAMP('2024-08-25 14:00:00', 'YYYY-MM-DD HH24:MI:SS'),
 TO_TIMESTAMP('2024-08-25 15:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- 메시지 샘플 데이터
INSERT INTO MESSAGES (MESSAGE_ID, SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT) VALUES 
(SEQ_MESSAGE_ID.NEXTVAL, 'emp002', '김직원', 'emp001', '이사원', '안녕하세요! 오늘 회의 자료 확인 부탁드립니다.');

COMMIT;

-- 조회용 뷰 생성

-- 1. 최근 공지사항 뷰
CREATE OR REPLACE VIEW V_RECENT_NOTICES AS
SELECT NOTICE_ID, TITLE, CONTENT, AUTHOR_NAME, CREATE_DATE, VIEW_COUNT
FROM NOTICES
WHERE IS_ACTIVE = 'Y'
ORDER BY CREATE_DATE DESC;

-- 2. 사용자별 미완료 할일 뷰
CREATE OR REPLACE VIEW V_PENDING_TODOS AS
SELECT TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY, DUE_DATE, CREATE_DATE
FROM TODOS
WHERE IS_COMPLETED = 'N'
ORDER BY PRIORITY, DUE_DATE;

-- 3. 월별 출퇴근 현황 뷰
CREATE OR REPLACE VIEW V_MONTHLY_ATTENDANCE AS
SELECT 
    USER_ID,
    TO_CHAR(WORK_DATE, 'YYYY-MM') AS WORK_MONTH,
    COUNT(*) AS WORK_DAYS,
    SUM(TOTAL_WORK_MINUTES) AS TOTAL_MINUTES,
    SUM(OVERTIME_MINUTES) AS OVERTIME_MINUTES,
    SUM(CASE WHEN STATUS = 'LATE' THEN 1 ELSE 0 END) AS LATE_DAYS
FROM ATTENDANCE
WHERE CHECK_IN_TIME IS NOT NULL
GROUP BY USER_ID, TO_CHAR(WORK_DATE, 'YYYY-MM')
ORDER BY USER_ID, WORK_MONTH DESC;

-- 4. 읽지 않은 메시지 뷰
CREATE OR REPLACE VIEW V_UNREAD_MESSAGES AS
SELECT MESSAGE_ID, SENDER_NAME, RECEIVER_ID, CONTENT, SEND_DATE
FROM MESSAGES
WHERE IS_READ = 'N'
ORDER BY SEND_DATE DESC;

-- 5. 오늘의 일정 뷰
CREATE OR REPLACE VIEW V_TODAY_EVENTS AS
SELECT EVENT_ID, USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION
FROM CALENDAR_EVENTS
WHERE DATE(START_DATE) = DATE(SYSDATE)
   OR (DATE(START_DATE) <= DATE(SYSDATE) AND DATE(END_DATE) >= DATE(SYSDATE))
ORDER BY START_DATE;