<<<<<<< HEAD
-- 그룹웨어 시스템을 위한 데이터베이스 테이블 생성 스크립트

<<<<<<< HEAD
-- 1. 공지사항 테이블
CREATE TABLE NOTICES (
    NOTICE_ID NUMBER PRIMARY KEY,
    TITLE VARCHAR2(200) NOT NULL,
    CONTENT CLOB NOT NULL,
    AUTHOR_ID VARCHAR2(50) NOT NULL,
    AUTHOR_NAME VARCHAR2(100) NOT NULL,
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE,
    VIEW_COUNT NUMBER DEFAULT 0,
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N'))
);

-- 2. 할일 목록 테이블
CREATE TABLE TODOS (
    TODO_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    IS_COMPLETED CHAR(1) DEFAULT 'N' CHECK (IS_COMPLETED IN ('Y', 'N')),
    PRIORITY NUMBER DEFAULT 3 CHECK (PRIORITY BETWEEN 1 AND 5), -- 1:높음, 3:보통, 5:낮음
    DUE_DATE DATE,
    CREATE_DATE DATE DEFAULT SYSDATE,
    COMPLETE_DATE DATE
);

-- 3. 출퇴근 관리 테이블
CREATE TABLE ATTENDANCE (
    ATTENDANCE_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    WORK_DATE DATE NOT NULL,
    CHECK_IN_TIME TIMESTAMP,
    CHECK_OUT_TIME TIMESTAMP,
    TOTAL_WORK_MINUTES NUMBER,
    BREAK_MINUTES NUMBER DEFAULT 0,
    OVERTIME_MINUTES NUMBER DEFAULT 0,
    STATUS VARCHAR2(20) DEFAULT 'ABSENT' CHECK (STATUS IN ('PRESENT', 'ABSENT', 'LATE', 'EARLY_LEAVE')),
    NOTES VARCHAR2(500),
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE
);

-- 4. 메신저 메시지 테이블
CREATE TABLE MESSAGES (
    MESSAGE_ID NUMBER PRIMARY KEY,
    SENDER_ID VARCHAR2(50) NOT NULL,
    SENDER_NAME VARCHAR2(100) NOT NULL,
    RECEIVER_ID VARCHAR2(50),
    RECEIVER_NAME VARCHAR2(100),
    MESSAGE_TYPE VARCHAR2(20) DEFAULT 'PERSONAL' CHECK (MESSAGE_TYPE IN ('PERSONAL', 'GROUP', 'BROADCAST')),
    CONTENT VARCHAR2(1000) NOT NULL,
    IS_READ CHAR(1) DEFAULT 'N' CHECK (IS_READ IN ('Y', 'N')),
    SEND_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    READ_DATE TIMESTAMP
);

-- 5. 캘린더 일정 테이블
CREATE TABLE CALENDAR_EVENTS (
    EVENT_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    EVENT_TYPE VARCHAR2(20) DEFAULT 'PERSONAL' CHECK (EVENT_TYPE IN ('PERSONAL', 'MEETING', 'HOLIDAY', 'COMPANY')),
    START_DATE TIMESTAMP NOT NULL,
    END_DATE TIMESTAMP NOT NULL,
    IS_ALL_DAY CHAR(1) DEFAULT 'N' CHECK (IS_ALL_DAY IN ('Y', 'N')),
    LOCATION VARCHAR2(200),
    REMINDER_MINUTES NUMBER DEFAULT 0,
    IS_RECURRING CHAR(1) DEFAULT 'N' CHECK (IS_RECURRING IN ('Y', 'N')),
    RECURRENCE_PATTERN VARCHAR2(100),
    CREATE_DATE DATE DEFAULT SYSDATE,
    UPDATE_DATE DATE DEFAULT SYSDATE
);

-- 6. 파일 첨부 테이블 (공지사항, 메시지 등에서 사용)
CREATE TABLE ATTACHMENTS (
    ATTACHMENT_ID NUMBER PRIMARY KEY,
    RELATED_TYPE VARCHAR2(20) NOT NULL CHECK (RELATED_TYPE IN ('NOTICE', 'MESSAGE', 'EVENT')),
    RELATED_ID NUMBER NOT NULL,
    ORIGINAL_NAME VARCHAR2(255) NOT NULL,
    STORED_NAME VARCHAR2(255) NOT NULL,
    FILE_PATH VARCHAR2(500) NOT NULL,
    FILE_SIZE NUMBER NOT NULL,
    CONTENT_TYPE VARCHAR2(100),
    UPLOAD_DATE DATE DEFAULT SYSDATE,
    UPLOADER_ID VARCHAR2(50) NOT NULL
);

-- 시퀀스 생성
CREATE SEQUENCE SEQ_NOTICE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_TODO_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_ATTENDANCE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_MESSAGE_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_EVENT_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_ATTACHMENT_ID START WITH 1 INCREMENT BY 1 NOCACHE;

-- 인덱스 생성 (성능 향상을 위해)
CREATE INDEX IDX_NOTICES_AUTHOR ON NOTICES(AUTHOR_ID);
CREATE INDEX IDX_NOTICES_DATE ON NOTICES(CREATE_DATE);
CREATE INDEX IDX_TODOS_USER ON TODOS(USER_ID);
CREATE INDEX IDX_TODOS_DATE ON TODOS(CREATE_DATE);
CREATE INDEX IDX_ATTENDANCE_USER_DATE ON ATTENDANCE(USER_ID, WORK_DATE);
CREATE INDEX IDX_MESSAGES_SENDER ON MESSAGES(SENDER_ID);
CREATE INDEX IDX_MESSAGES_RECEIVER ON MESSAGES(RECEIVER_ID);
CREATE INDEX IDX_MESSAGES_DATE ON MESSAGES(SEND_DATE);
CREATE INDEX IDX_EVENTS_USER ON CALENDAR_EVENTS(USER_ID);
CREATE INDEX IDX_EVENTS_DATE ON CALENDAR_EVENTS(START_DATE);

-- 트리거 생성

-- 1. 공지사항 업데이트 시 UPDATE_DATE 자동 갱신
CREATE OR REPLACE TRIGGER TRG_NOTICES_UPDATE
    BEFORE UPDATE ON NOTICES
    FOR EACH ROW
BEGIN
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 2. 출퇴근 시간 계산 트리거
CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_CALC
    BEFORE INSERT OR UPDATE ON ATTENDANCE
    FOR EACH ROW
BEGIN
    -- 출근과 퇴근 시간이 모두 있을 때 총 근무시간 계산
    IF :NEW.CHECK_IN_TIME IS NOT NULL AND :NEW.CHECK_OUT_TIME IS NOT NULL THEN
        :NEW.TOTAL_WORK_MINUTES := EXTRACT(DAY FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME)) * 24 * 60 +
                                   EXTRACT(HOUR FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME)) * 60 +
                                   EXTRACT(MINUTE FROM (:NEW.CHECK_OUT_TIME - :NEW.CHECK_IN_TIME));
        
        -- 8시간(480분) 초과 시 초과근무시간 계산
        IF :NEW.TOTAL_WORK_MINUTES > 480 THEN
            :NEW.OVERTIME_MINUTES := :NEW.TOTAL_WORK_MINUTES - 480;
        ELSE
            :NEW.OVERTIME_MINUTES := 0;
        END IF;
        
        -- 출근 상태 결정 (9시 이후 출근은 지각)
        IF EXTRACT(HOUR FROM :NEW.CHECK_IN_TIME) >= 9 THEN
            :NEW.STATUS := 'LATE';
        ELSE
            :NEW.STATUS := 'PRESENT';
        END IF;
        
        -- 조기퇴근 체크 (18시 이전 퇴근)
        IF EXTRACT(HOUR FROM :NEW.CHECK_OUT_TIME) < 18 THEN
            :NEW.STATUS := 'EARLY_LEAVE';
        END IF;
    END IF;
    
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 3. 메시지 읽음 처리 트리거
CREATE OR REPLACE TRIGGER TRG_MESSAGE_READ
    BEFORE UPDATE ON MESSAGES
    FOR EACH ROW
BEGIN
    -- 읽음 상태가 N에서 Y로 변경될 때 읽은 시간 설정
    IF :OLD.IS_READ = 'N' AND :NEW.IS_READ = 'Y' THEN
        :NEW.READ_DATE := CURRENT_TIMESTAMP;
    END IF;
END;
/

-- 4. 캘린더 이벤트 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_EVENTS_UPDATE
    BEFORE UPDATE ON CALENDAR_EVENTS
    FOR EACH ROW
BEGIN
    :NEW.UPDATE_DATE := SYSDATE;
END;
/

-- 샘플 데이터 삽입

-- 공지사항 샘플 데이터
INSERT INTO NOTICES (NOTICE_ID, TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME) VALUES 
(SEQ_NOTICE_ID.NEXTVAL, '시스템 점검 안내', '다음 주 토요일 오후 2시부터 4시까지 시스템 점검이 있을 예정입니다.', 'admin', '관리자');

INSERT INTO NOTICES (NOTICE_ID, TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME) VALUES 
(SEQ_NOTICE_ID.NEXTVAL, '신입사원 환영회', '이번 달 말에 신입사원 환영회를 개최합니다. 많은 참석 부탁드립니다.', 'hr001', '인사팀');

-- 할일 목록 샘플 데이터
INSERT INTO TODOS (TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY, DUE_DATE) VALUES 
(SEQ_TODO_ID.NEXTVAL, 'emp001', '월간 보고서 작성', '이번 달 업무 성과 보고서 작성', 2, SYSDATE + 7);

INSERT INTO TODOS (TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY) VALUES 
(SEQ_TODO_ID.NEXTVAL, 'emp001', '회의실 예약', '내일 오후 회의를 위한 회의실 예약', 1);

-- 캘린더 이벤트 샘플 데이터
INSERT INTO CALENDAR_EVENTS (EVENT_ID, USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE) VALUES 
(SEQ_EVENT_ID.NEXTVAL, 'emp001', '팀 회의', '주간 팀 회의', 'MEETING', 
 TO_TIMESTAMP('2024-08-25 14:00:00', 'YYYY-MM-DD HH24:MI:SS'),
 TO_TIMESTAMP('2024-08-25 15:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- 메시지 샘플 데이터
INSERT INTO MESSAGES (MESSAGE_ID, SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT) VALUES 
(SEQ_MESSAGE_ID.NEXTVAL, 'emp002', '김직원', 'emp001', '이사원', '안녕하세요! 오늘 회의 자료 확인 부탁드립니다.');

COMMIT;

-- 조회용 뷰 생성

-- 1. 최근 공지사항 뷰
CREATE OR REPLACE VIEW V_RECENT_NOTICES AS
SELECT NOTICE_ID, TITLE, CONTENT, AUTHOR_NAME, CREATE_DATE, VIEW_COUNT
FROM NOTICES
WHERE IS_ACTIVE = 'Y'
ORDER BY CREATE_DATE DESC;

-- 2. 사용자별 미완료 할일 뷰
CREATE OR REPLACE VIEW V_PENDING_TODOS AS
SELECT TODO_ID, USER_ID, TITLE, DESCRIPTION, PRIORITY, DUE_DATE, CREATE_DATE
FROM TODOS
WHERE IS_COMPLETED = 'N'
ORDER BY PRIORITY, DUE_DATE;

-- 3. 월별 출퇴근 현황 뷰
CREATE OR REPLACE VIEW V_MONTHLY_ATTENDANCE AS
SELECT 
    USER_ID,
    TO_CHAR(WORK_DATE, 'YYYY-MM') AS WORK_MONTH,
    COUNT(*) AS WORK_DAYS,
    SUM(TOTAL_WORK_MINUTES) AS TOTAL_MINUTES,
    SUM(OVERTIME_MINUTES) AS OVERTIME_MINUTES,
    SUM(CASE WHEN STATUS = 'LATE' THEN 1 ELSE 0 END) AS LATE_DAYS
FROM ATTENDANCE
WHERE CHECK_IN_TIME IS NOT NULL
GROUP BY USER_ID, TO_CHAR(WORK_DATE, 'YYYY-MM')
ORDER BY USER_ID, WORK_MONTH DESC;

-- 4. 읽지 않은 메시지 뷰
CREATE OR REPLACE VIEW V_UNREAD_MESSAGES AS
SELECT MESSAGE_ID, SENDER_NAME, RECEIVER_ID, CONTENT, SEND_DATE
FROM MESSAGES
WHERE IS_READ = 'N'
ORDER BY SEND_DATE DESC;

-- 5. 오늘의 일정 뷰
CREATE OR REPLACE VIEW V_TODAY_EVENTS AS
SELECT EVENT_ID, USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION
FROM CALENDAR_EVENTS
WHERE DATE(START_DATE) = DATE(SYSDATE)
   OR (DATE(START_DATE) <= DATE(SYSDATE) AND DATE(END_DATE) >= DATE(SYSDATE))
ORDER BY START_DATE;
=======
-- groupware table
-- 기대 객체 목록을 WITH로 정의하고 USER_OBJECTS와 비교
WITH expected AS (
  SELECT 'TABLE'    AS kind, 'NOTICES'          AS name FROM dual UNION ALL
  SELECT 'TABLE',   'TODOS'                     FROM dual UNION ALL
  SELECT 'TABLE',   'ATTENDANCE'                FROM dual UNION ALL
  SELECT 'TABLE',   'MESSAGES'                  FROM dual UNION ALL
  SELECT 'TABLE',   'CALENDAR_EVENTS'           FROM dual UNION ALL
  SELECT 'TABLE',   'ATTACHMENTS'               FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_NOTICE_ID'             FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_TODO_ID'               FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_ATTENDANCE_ID'         FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_MESSAGE_ID'            FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_EVENT_ID'              FROM dual UNION ALL
  SELECT 'SEQUENCE','SEQ_ATTACHMENT_ID'         FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_NOTICES_BI'            FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_TODOS_BI'              FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_ATTENDANCE_BI'         FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_MESSAGES_BI'           FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_EVENTS_BI'             FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_ATTACHMENTS_BI'        FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_NOTICES_UPDATE'        FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_ATTENDANCE_UPDATE'     FROM dual UNION ALL
  SELECT 'TRIGGER', 'TRG_EVENTS_UPDATE'         FROM dual
)

=======
>>>>>>> cddda14998e5a164e841ccb98ce4bf191064d936

-- ===== TRIGGERS (존재 시만 삭제: ORA-04080 무시) =====
BEGIN FOR t IN (
  SELECT trigger_name FROM user_triggers WHERE trigger_name IN (
    'TRG_NOTICES_BI','TRG_TODOS_BI','TRG_ATTENDANCE_BI',
    'TRG_MESSAGES_BI','TRG_EVENTS_BI','TRG_ATTACHMENTS_BI',
    'TRG_NOTICES_UPDATE','TRG_ATTENDANCE_UPDATE','TRG_EVENTS_UPDATE'
  )
) LOOP
  EXECUTE IMMEDIATE 'DROP TRIGGER '||t.trigger_name;
END LOOP; END;
/

-- ===== TABLES =====
BEGIN
  FOR x IN (SELECT table_name FROM user_tables
            WHERE table_name IN ('ATTACHMENTS','CALENDAR_EVENTS','MESSAGES','ATTENDANCE','TODOS','NOTICES')) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE '||x.table_name||' CASCADE CONSTRAINTS PURGE';
  END LOOP;
END;
/

-- ===== SEQUENCES =====
BEGIN
  FOR s IN (SELECT sequence_name FROM user_sequences
            WHERE sequence_name IN ('SEQ_NOTICE_ID','SEQ_TODO_ID','SEQ_ATTENDANCE_ID',
                                    'SEQ_MESSAGE_ID','SEQ_EVENT_ID','SEQ_ATTACHMENT_ID')) LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE '||s.sequence_name;
  END LOOP;
END;
/

CREATE SEQUENCE SEQ_NOTICE_ID      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TODO_ID        START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ATTENDANCE_ID  START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_MESSAGE_ID     START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_EVENT_ID       START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ATTACHMENT_ID  START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 공지사항
CREATE TABLE NOTICES (
  NOTICE_ID    NUMBER          PRIMARY KEY,
  TITLE        VARCHAR2(200)   NOT NULL,
  CONTENT      CLOB            NOT NULL,
  AUTHOR_ID    VARCHAR2(50)    NOT NULL,
  AUTHOR_NAME  VARCHAR2(100)   NOT NULL,
  CREATE_DATE  DATE            DEFAULT SYSDATE,
  UPDATE_DATE  DATE            DEFAULT SYSDATE,
  VIEW_COUNT   NUMBER          DEFAULT 0,
  IS_ACTIVE    CHAR(1)         DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N'))
);

-- 할일
CREATE TABLE TODOS (
  TODO_ID       NUMBER          PRIMARY KEY,
  USER_ID       VARCHAR2(50)    NOT NULL,
  TITLE         VARCHAR2(200)   NOT NULL,
  DESCRIPTION   VARCHAR2(1000),
  IS_COMPLETED  CHAR(1)         DEFAULT 'N' CHECK (IS_COMPLETED IN ('Y','N')),
  PRIORITY      NUMBER          DEFAULT 3 CHECK (PRIORITY BETWEEN 1 AND 5),
  DUE_DATE      DATE,
  CREATE_DATE   DATE            DEFAULT SYSDATE,
  COMPLETE_DATE DATE
);

-- 출퇴근
CREATE TABLE ATTENDANCE (
  ATTENDANCE_ID      NUMBER        PRIMARY KEY,
  USER_ID            VARCHAR2(50)  NOT NULL,
  WORK_DATE          DATE          NOT NULL,
  CHECK_IN_TIME      TIMESTAMP,
  CHECK_OUT_TIME     TIMESTAMP,
  TOTAL_WORK_MINUTES NUMBER,
  BREAK_MINUTES      NUMBER        DEFAULT 0,
  OVERTIME_MINUTES   NUMBER        DEFAULT 0,
  STATUS             VARCHAR2(20)  DEFAULT 'ABSENT' CHECK (STATUS IN ('PRESENT','ABSENT','LATE','EARLY_LEAVE')),
  NOTES              VARCHAR2(500),
  CREATE_DATE        DATE          DEFAULT SYSDATE,
  UPDATE_DATE        DATE          DEFAULT SYSDATE
);

-- 메시지
CREATE TABLE MESSAGES (
  MESSAGE_ID    NUMBER          PRIMARY KEY,
  SENDER_ID     VARCHAR2(50)    NOT NULL,
  SENDER_NAME   VARCHAR2(100)   NOT NULL,
  RECEIVER_ID   VARCHAR2(50),
  RECEIVER_NAME VARCHAR2(100),
  MESSAGE_TYPE  VARCHAR2(20)    DEFAULT 'PERSONAL' CHECK (MESSAGE_TYPE IN ('PERSONAL','GROUP','BROADCAST')),
  CONTENT       VARCHAR2(1000)  NOT NULL,
  IS_READ       CHAR(1)         DEFAULT 'N' CHECK (IS_READ IN ('Y','N')),
  SEND_DATE     TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
  READ_DATE     TIMESTAMP
);

-- 캘린더
CREATE TABLE CALENDAR_EVENTS (
  EVENT_ID          NUMBER          PRIMARY KEY,
  USER_ID           VARCHAR2(50)    NOT NULL,
  TITLE             VARCHAR2(200)   NOT NULL,
  DESCRIPTION       VARCHAR2(1000),
  EVENT_TYPE        VARCHAR2(20)    DEFAULT 'PERSONAL' CHECK (EVENT_TYPE IN ('PERSONAL','MEETING','HOLIDAY','COMPANY')),
  START_DATE        TIMESTAMP       NOT NULL,
  END_DATE          TIMESTAMP       NOT NULL,
  IS_ALL_DAY        CHAR(1)         DEFAULT 'N' CHECK (IS_ALL_DAY IN ('Y','N')),
  LOCATION          VARCHAR2(200),
  REMINDER_MINUTES  NUMBER          DEFAULT 0,
  IS_RECURRING      CHAR(1)         DEFAULT 'N' CHECK (IS_RECURRING IN ('Y','N')),
  RECURRENCE_PATTERN VARCHAR2(100),
  CREATE_DATE       DATE            DEFAULT SYSDATE,
  UPDATE_DATE       DATE            DEFAULT SYSDATE
);

-- 첨부파일
CREATE TABLE ATTACHMENTS (
  ATTACHMENT_ID NUMBER          PRIMARY KEY,
  RELATED_TYPE  VARCHAR2(20)    NOT NULL CHECK (RELATED_TYPE IN ('NOTICE','MESSAGE','EVENT')),
  RELATED_ID    NUMBER          NOT NULL,
  ORIGINAL_NAME VARCHAR2(255)   NOT NULL,
  STORED_NAME   VARCHAR2(255)   NOT NULL,
  FILE_PATH     VARCHAR2(500)   NOT NULL,
  FILE_SIZE     NUMBER          NOT NULL,
  CONTENT_TYPE  VARCHAR2(100),
  UPLOAD_DATE   DATE            DEFAULT SYSDATE,
  UPLOADER_ID   VARCHAR2(50)    NOT NULL
);

-- 자동 채번
CREATE OR REPLACE TRIGGER TRG_NOTICES_BI
BEFORE INSERT ON NOTICES FOR EACH ROW
BEGIN IF :NEW.NOTICE_ID IS NULL THEN :NEW.NOTICE_ID := SEQ_NOTICE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_TODOS_BI
BEFORE INSERT ON TODOS FOR EACH ROW
BEGIN IF :NEW.TODO_ID IS NULL THEN :NEW.TODO_ID := SEQ_TODO_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_BI
BEFORE INSERT ON ATTENDANCE FOR EACH ROW
BEGIN IF :NEW.ATTENDANCE_ID IS NULL THEN :NEW.ATTENDANCE_ID := SEQ_ATTENDANCE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_MESSAGES_BI
BEFORE INSERT ON MESSAGES FOR EACH ROW
BEGIN IF :NEW.MESSAGE_ID IS NULL THEN :NEW.MESSAGE_ID := SEQ_MESSAGE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_EVENTS_BI
BEFORE INSERT ON CALENDAR_EVENTS FOR EACH ROW
BEGIN IF :NEW.EVENT_ID IS NULL THEN :NEW.EVENT_ID := SEQ_EVENT_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_ATTACHMENTS_BI
BEFORE INSERT ON ATTACHMENTS FOR EACH ROW
BEGIN IF :NEW.ATTACHMENT_ID IS NULL THEN :NEW.ATTACHMENT_ID := SEQ_ATTACHMENT_ID.NEXTVAL; END IF; END;


-- UPDATE_DATE 자동 갱신 (앱단에서 갱신 안 할 때 유용)
CREATE OR REPLACE TRIGGER TRG_NOTICES_UPDATE
BEFORE UPDATE ON NOTICES FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_UPDATE
BEFORE UPDATE ON ATTENDANCE FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


CREATE OR REPLACE TRIGGER TRG_EVENTS_UPDATE
BEFORE UPDATE ON CALENDAR_EVENTS FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


<<<<<<< HEAD



INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 피자데이 안내', '이번 금요일은 피자 무제한 데이! 점심에 회의실 B에서 만나요 🍕', 'admin', '관리자');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('개발팀 해커톤 개최', '48시간 코딩 해커톤! 잠은 선택, 커피는 필수 ☕', 'dev001', '개발팀장');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 밴드 공연', '동호회 밴드가 사운드홀에서 락 공연을 합니다. 귀마개는 선택사항 🤘', 'hr001', '인사팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('회의실 이름 변경', '회의실 이름이 이제 스타워즈 캐릭터로 바뀝니다. 다스베이더 → 요다', 'op001', '총무팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 영화 상영회', '이번 주 토요일, 대회의실에서 “인셉션” 상영합니다. 팝콘 제공 🍿', 'hr002', '문화위원');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('AI 모델 런칭 파티', '우리가 만든 챗봇을 세상에 공개합니다! 풍선과 케이크 준비됨 🎂', 'dev002', 'AI팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('동호회 가입 안내', '보드게임, 클라이밍, 자전거 동호회 회원 모집 중 🚴', 'hr003', '복지팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 오락실 오픈', '지하 1층 탁구대, 다트, 오락기 설치 완료! 퇴근 후 즐겨보세요 🎮', 'op002', '총무팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('헬스장 이용안내', '회사 2층 헬스장이 이번 달부터 무료 개방됩니다. 헬스장을 지배하라 💪', 'hr004', '인사팀');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 고양이 주의', '캠퍼스 내 길고양이가 자주 출몰합니다. 간식 주지 마세요 🐱', 'op003', '시설팀');




INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp001','커피머신 청소','사무실 커피머신이 요즘 맛이 이상함. 청소 필요','2');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp002','회의록 정리','어제 회의에서 다들 뭐라고 했는지 기록 필요','3');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp003','버그 잡기','로그인 시 버튼이 가끔 사라지는 현상 수정','1');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp004','신입 교육자료 준비','신입사원 온보딩용 PPT 제작','2');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp005','간식 주문','다음 주 스낵박스 주문 (오레오, 프링글스, 젤리)','4');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp006','사내 Wi-Fi 이름 변경','새로운 와이파이 SSID: CatLover5G','5');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp007','코드 리뷰','팀원 Pull Request 3개 리뷰하기','2');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp008','데이터베이스 백업','금요일 오후에 전체 백업 실행','1');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp009','사내 포스터 디자인','다음달 이벤트 홍보 포스터 만들기','3');

INSERT INTO TODOS (USER_ID, TITLE, DESCRIPTION, PRIORITY)
VALUES ('emp010','팀 점심 예약','금요일 회식 장소 예약 (삼겹살)','2');




INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp001', SYSDATE-9, TO_TIMESTAMP('09:02','HH24:MI'), TO_TIMESTAMP('18:01','HH24:MI'),'LATE');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp002', SYSDATE-8, TO_TIMESTAMP('08:55','HH24:MI'), TO_TIMESTAMP('18:05','HH24:MI'),'PRESENT');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp003', SYSDATE-7, TO_TIMESTAMP('09:30','HH24:MI'), TO_TIMESTAMP('17:50','HH24:MI'),'EARLY_LEAVE');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp004', SYSDATE-6, TO_TIMESTAMP('09:00','HH24:MI'), TO_TIMESTAMP('18:10','HH24:MI'),'PRESENT');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp005', SYSDATE-5, TO_TIMESTAMP('09:15','HH24:MI'), TO_TIMESTAMP('18:00','HH24:MI'),'LATE');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp006', SYSDATE-4, TO_TIMESTAMP('09:01','HH24:MI'), TO_TIMESTAMP('18:02','HH24:MI'),'PRESENT');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp007', SYSDATE-3, TO_TIMESTAMP('10:00','HH24:MI'), TO_TIMESTAMP('18:30','HH24:MI'),'LATE');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp008', SYSDATE-2, TO_TIMESTAMP('09:05','HH24:MI'), TO_TIMESTAMP('17:40','HH24:MI'),'EARLY_LEAVE');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp009', SYSDATE-1, TO_TIMESTAMP('08:59','HH24:MI'), TO_TIMESTAMP('18:20','HH24:MI'),'PRESENT');

INSERT INTO ATTENDANCE (USER_ID, WORK_DATE, CHECK_IN_TIME, CHECK_OUT_TIME, STATUS)
VALUES ('emp010', SYSDATE, TO_TIMESTAMP('09:45','HH24:MI'), TO_TIMESTAMP('17:30','HH24:MI'),'LATE');



INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp001','철수','emp002','영희','오늘 점심 뭐 먹을래? 🍜');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp002','영희','emp001','철수','짬뽕 어때?');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp003','민수','emp004','지은','회의 자료 공유했어 확인 부탁~');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp004','지은','emp003','민수','ㅇㅋ 확인했어!');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp005','태호','emp006','현지','야구 예매했어 ⚾');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp006','현지','emp005','태호','굿! 치맥 준비하자 🍺');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp007','정우','emp008','다은','사진 보냈어 📸');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp008','다은','emp007','정우','헉 잘 찍었네 👍');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp009','하늘','emp010','유진','오늘 퇴근 후 탁구 ㄱ? 🏓');

INSERT INTO MESSAGES (SENDER_ID, SENDER_NAME, RECEIVER_ID, RECEIVER_NAME, CONTENT)
VALUES ('emp010','유진','emp009','하늘','콜~ 탁구채 챙겨옴');




INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp001','주간 회의','이번주 진행사항 공유','MEETING', SYSDATE+1, SYSDATE+1+1/24,'회의실 A');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp002','헬스장 모임','헬스장에서 함께 운동','PERSONAL', SYSDATE+2, SYSDATE+2+2/24,'헬스장');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp003','팀 점심 회식','신입 환영 점심식사','COMPANY', SYSDATE+3, SYSDATE+3+2/24,'식당');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp004','보드게임 모임','퇴근 후 보드게임 파티','PERSONAL', SYSDATE+4, SYSDATE+4+3/24,'라운지');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp005','스터디','자바 스터디 진행','MEETING', SYSDATE+5, SYSDATE+5+2/24,'회의실 B');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp006','영화관람','팀원들과 영화 보기','COMPANY', SYSDATE+6, SYSDATE+6+3/24,'대회의실');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp007','야유회','봄맞이 회사 야유회','COMPANY', SYSDATE+7, SYSDATE+7+6/24,'한강공원');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp008','생일파티','팀원 생일 축하 🎂','PERSONAL', SYSDATE+8, SYSDATE+8+4/24,'휴게실');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp009','기술세미나','외부 초청 강연','COMPANY', SYSDATE+9, SYSDATE+9+2/24,'세미나룸');

INSERT INTO CALENDAR_EVENTS (USER_ID, TITLE, DESCRIPTION, EVENT_TYPE, START_DATE, END_DATE, LOCATION)
VALUES ('emp010','공휴일','광복절 휴일','HOLIDAY', SYSDATE+10, SYSDATE+10+24/24,'');




INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('NOTICE',1,'pizza.jpg','f_pizza.jpg','/upload',1024,'image/jpeg','emp001');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('NOTICE',2,'hackathon.pdf','f_hackathon.pdf','/upload',2048,'application/pdf','emp002');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('MESSAGE',3,'meeting.png','f_meeting.png','/upload',512,'image/png','emp003');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('MESSAGE',4,'band.mp3','f_band.mp3','/upload',4096,'audio/mpeg','emp004');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('EVENT',5,'poster.png','f_poster.png','/upload',800,'image/png','emp005');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('EVENT',6,'seminar.pdf','f_seminar.pdf','/upload',1500,'application/pdf','emp006');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('NOTICE',7,'game.zip','f_game.zip','/upload',9000,'application/zip','emp007');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('MESSAGE',8,'cat.jpg','f_cat.jpg','/upload',300,'image/jpeg','emp008');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('EVENT',9,'study.pptx','f_study.pptx','/upload',1200,'application/vnd.ms-powerpoint','emp009');

INSERT INTO ATTACHMENTS (RELATED_TYPE, RELATED_ID, ORIGINAL_NAME, STORED_NAME, FILE_PATH, FILE_SIZE, CONTENT_TYPE, UPLOADER_ID)
VALUES ('EVENT',10,'picnic.docx','f_picnic.docx','/upload',2000,'application/vnd.openxmlformats-officedocument.wordprocessingml.document','emp010');


>>>>>>> cb00c5fcb904cfc4347a707877c00f9821a0116c
=======
-- 공지: 글쓴이
ALTER TABLE NOTICES
  ADD CONSTRAINT FK_NOTICES_AUTHOR
  FOREIGN KEY (AUTHOR_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 할 일: 주인
ALTER TABLE TODOS
  ADD CONSTRAINT FK_TODOS_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 출퇴근: 주체
ALTER TABLE ATTENDANCE
  ADD CONSTRAINT FK_ATTENDANCE_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 메시지: 보낸 사람
ALTER TABLE MESSAGES
  ADD CONSTRAINT FK_MESSAGES_SENDER
  FOREIGN KEY (SENDER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 메시지: 받는 사람 (NULL 허용)
ALTER TABLE MESSAGES
  ADD CONSTRAINT FK_MESSAGES_RECEIVER
  FOREIGN KEY (RECEIVER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 캘린더: 소유자
ALTER TABLE CALENDAR_EVENTS
  ADD CONSTRAINT FK_EVENTS_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 첨부: 업로더
ALTER TABLE ATTACHMENTS
  ADD CONSTRAINT FK_ATTACHMENTS_UPLOADER
  FOREIGN KEY (UPLOADER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 공지
INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('시스템 점검 안내', '오늘 22:00~23:00 점검 예정입니다.', 'admin', '관리자');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('신규 입사자 환영', '다마고치님이 인사팀으로 합류했습니다.', 'admin10', '고군');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('개발 환경 업데이트', 'JDK와 라이브러리 버전이 갱신되었습니다.', 'user02', '이순신');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('보안 수칙 재안내', '비밀번호는 주기적으로 변경해주세요.', 'ddd', 'ddd');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 복지 안내', '점심 식대 지원 정책이 개편되었습니다.', 'rs10000', '마이클');

COMMIT;



>>>>>>> cddda14998e5a164e841ccb98ce4bf191064d936
