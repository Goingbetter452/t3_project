
-- ===== TRIGGERS (존재 시만 삭제: ORA-04080 무시) =====
BEGIN FOR t IN (
  SELECT trigger_name FROM user_triggers WHERE trigger_name IN (
    'TRG_NOTICES_BI','TRG_TODOS_BI','TRG_ATTENDANCE_BI',
    'TRG_MESSAGES_BI','TRG_EVENTS_BI','TRG_ATTACHMENTS_BI',
    'TRG_NOTICES_UPDATE','TRG_ATTENDANCE_UPDATE','TRG_EVENTS_UPDATE'
  )
) LOOP
  EXECUTE IMMEDIATE 'DROP TRIGGER '||t.trigger_name;
END LOOP; END;
/

-- ===== TABLES =====
BEGIN
  FOR x IN (SELECT table_name FROM user_tables
            WHERE table_name IN ('ATTACHMENTS','CALENDAR_EVENTS','MESSAGES','ATTENDANCE','TODOS','NOTICES')) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE '||x.table_name||' CASCADE CONSTRAINTS PURGE';
  END LOOP;
END;
/

-- ===== SEQUENCES =====
BEGIN
  FOR s IN (SELECT sequence_name FROM user_sequences
            WHERE sequence_name IN ('SEQ_NOTICE_ID','SEQ_TODO_ID','SEQ_ATTENDANCE_ID',
                                    'SEQ_MESSAGE_ID','SEQ_EVENT_ID','SEQ_ATTACHMENT_ID')) LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE '||s.sequence_name;
  END LOOP;
END;
/

CREATE SEQUENCE SEQ_NOTICE_ID      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TODO_ID        START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ATTENDANCE_ID  START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_MESSAGE_ID     START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_EVENT_ID       START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ATTACHMENT_ID  START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 공지사항
CREATE TABLE NOTICES (
  NOTICE_ID    NUMBER          PRIMARY KEY,
  TITLE        VARCHAR2(200)   NOT NULL,
  CONTENT      CLOB            NOT NULL,
  AUTHOR_ID    VARCHAR2(50)    NOT NULL,
  AUTHOR_NAME  VARCHAR2(100)   NOT NULL,
  CREATE_DATE  DATE            DEFAULT SYSDATE,
  UPDATE_DATE  DATE            DEFAULT SYSDATE,
  VIEW_COUNT   NUMBER          DEFAULT 0,
  IS_ACTIVE    CHAR(1)         DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N'))
);

-- 할일
CREATE TABLE TODOS (
  TODO_ID       NUMBER          PRIMARY KEY,
  USER_ID       VARCHAR2(50)    NOT NULL,
  TITLE         VARCHAR2(200)   NOT NULL,
  DESCRIPTION   VARCHAR2(1000),
  IS_COMPLETED  CHAR(1)         DEFAULT 'N' CHECK (IS_COMPLETED IN ('Y','N')),
  PRIORITY      NUMBER          DEFAULT 3 CHECK (PRIORITY BETWEEN 1 AND 5),
  DUE_DATE      DATE,
  CREATE_DATE   DATE            DEFAULT SYSDATE,
  COMPLETE_DATE DATE
);

-- 출퇴근
CREATE TABLE ATTENDANCE (
  ATTENDANCE_ID      NUMBER        PRIMARY KEY,
  USER_ID            VARCHAR2(50)  NOT NULL,
  WORK_DATE          DATE          NOT NULL,
  CHECK_IN_TIME      TIMESTAMP,
  CHECK_OUT_TIME     TIMESTAMP,
  TOTAL_WORK_MINUTES NUMBER,
  BREAK_MINUTES      NUMBER        DEFAULT 0,
  OVERTIME_MINUTES   NUMBER        DEFAULT 0,
  STATUS             VARCHAR2(20)  DEFAULT 'ABSENT' CHECK (STATUS IN ('PRESENT','ABSENT','LATE','EARLY_LEAVE')),
  NOTES              VARCHAR2(500),
  CREATE_DATE        DATE          DEFAULT SYSDATE,
  UPDATE_DATE        DATE          DEFAULT SYSDATE
);

-- 메시지
CREATE TABLE MESSAGES (
  MESSAGE_ID    NUMBER          PRIMARY KEY,
  SENDER_ID     VARCHAR2(50)    NOT NULL,
  SENDER_NAME   VARCHAR2(100)   NOT NULL,
  RECEIVER_ID   VARCHAR2(50),
  RECEIVER_NAME VARCHAR2(100),
  MESSAGE_TYPE  VARCHAR2(20)    DEFAULT 'PERSONAL' CHECK (MESSAGE_TYPE IN ('PERSONAL','GROUP','BROADCAST')),
  CONTENT       VARCHAR2(1000)  NOT NULL,
  IS_READ       CHAR(1)         DEFAULT 'N' CHECK (IS_READ IN ('Y','N')),
  SEND_DATE     TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
  READ_DATE     TIMESTAMP
);

-- 캘린더
CREATE TABLE CALENDAR_EVENTS (
  EVENT_ID          NUMBER          PRIMARY KEY,
  USER_ID           VARCHAR2(50)    NOT NULL,
  TITLE             VARCHAR2(200)   NOT NULL,
  DESCRIPTION       VARCHAR2(1000),
  EVENT_TYPE        VARCHAR2(20)    DEFAULT 'PERSONAL' CHECK (EVENT_TYPE IN ('PERSONAL','MEETING','HOLIDAY','COMPANY')),
  START_DATE        TIMESTAMP       NOT NULL,
  END_DATE          TIMESTAMP       NOT NULL,
  IS_ALL_DAY        CHAR(1)         DEFAULT 'N' CHECK (IS_ALL_DAY IN ('Y','N')),
  LOCATION          VARCHAR2(200),
  REMINDER_MINUTES  NUMBER          DEFAULT 0,
  IS_RECURRING      CHAR(1)         DEFAULT 'N' CHECK (IS_RECURRING IN ('Y','N')),
  RECURRENCE_PATTERN VARCHAR2(100),
  CREATE_DATE       DATE            DEFAULT SYSDATE,
  UPDATE_DATE       DATE            DEFAULT SYSDATE
);

-- 첨부파일
CREATE TABLE ATTACHMENTS (
  ATTACHMENT_ID NUMBER          PRIMARY KEY,
  RELATED_TYPE  VARCHAR2(20)    NOT NULL CHECK (RELATED_TYPE IN ('NOTICE','MESSAGE','EVENT')),
  RELATED_ID    NUMBER          NOT NULL,
  ORIGINAL_NAME VARCHAR2(255)   NOT NULL,
  STORED_NAME   VARCHAR2(255)   NOT NULL,
  FILE_PATH     VARCHAR2(500)   NOT NULL,
  FILE_SIZE     NUMBER          NOT NULL,
  CONTENT_TYPE  VARCHAR2(100),
  UPLOAD_DATE   DATE            DEFAULT SYSDATE,
  UPLOADER_ID   VARCHAR2(50)    NOT NULL
);

-- 자동 채번
CREATE OR REPLACE TRIGGER TRG_NOTICES_BI
BEFORE INSERT ON NOTICES FOR EACH ROW
BEGIN IF :NEW.NOTICE_ID IS NULL THEN :NEW.NOTICE_ID := SEQ_NOTICE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_TODOS_BI
BEFORE INSERT ON TODOS FOR EACH ROW
BEGIN IF :NEW.TODO_ID IS NULL THEN :NEW.TODO_ID := SEQ_TODO_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_BI
BEFORE INSERT ON ATTENDANCE FOR EACH ROW
BEGIN IF :NEW.ATTENDANCE_ID IS NULL THEN :NEW.ATTENDANCE_ID := SEQ_ATTENDANCE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_MESSAGES_BI
BEFORE INSERT ON MESSAGES FOR EACH ROW
BEGIN IF :NEW.MESSAGE_ID IS NULL THEN :NEW.MESSAGE_ID := SEQ_MESSAGE_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_EVENTS_BI
BEFORE INSERT ON CALENDAR_EVENTS FOR EACH ROW
BEGIN IF :NEW.EVENT_ID IS NULL THEN :NEW.EVENT_ID := SEQ_EVENT_ID.NEXTVAL; END IF; END;


CREATE OR REPLACE TRIGGER TRG_ATTACHMENTS_BI
BEFORE INSERT ON ATTACHMENTS FOR EACH ROW
BEGIN IF :NEW.ATTACHMENT_ID IS NULL THEN :NEW.ATTACHMENT_ID := SEQ_ATTACHMENT_ID.NEXTVAL; END IF; END;


-- UPDATE_DATE 자동 갱신 (앱단에서 갱신 안 할 때 유용)
CREATE OR REPLACE TRIGGER TRG_NOTICES_UPDATE
BEFORE UPDATE ON NOTICES FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


CREATE OR REPLACE TRIGGER TRG_ATTENDANCE_UPDATE
BEFORE UPDATE ON ATTENDANCE FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


CREATE OR REPLACE TRIGGER TRG_EVENTS_UPDATE
BEFORE UPDATE ON CALENDAR_EVENTS FOR EACH ROW
BEGIN :NEW.UPDATE_DATE := SYSDATE; END;


-- 공지: 글쓴이
ALTER TABLE NOTICES
  ADD CONSTRAINT FK_NOTICES_AUTHOR
  FOREIGN KEY (AUTHOR_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 할 일: 주인
ALTER TABLE TODOS
  ADD CONSTRAINT FK_TODOS_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 출퇴근: 주체
ALTER TABLE ATTENDANCE
  ADD CONSTRAINT FK_ATTENDANCE_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 메시지: 보낸 사람
ALTER TABLE MESSAGES
  ADD CONSTRAINT FK_MESSAGES_SENDER
  FOREIGN KEY (SENDER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 메시지: 받는 사람 (NULL 허용)
ALTER TABLE MESSAGES
  ADD CONSTRAINT FK_MESSAGES_RECEIVER
  FOREIGN KEY (RECEIVER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 캘린더: 소유자
ALTER TABLE CALENDAR_EVENTS
  ADD CONSTRAINT FK_EVENTS_USER
  FOREIGN KEY (USER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 첨부: 업로더
ALTER TABLE ATTACHMENTS
  ADD CONSTRAINT FK_ATTACHMENTS_UPLOADER
  FOREIGN KEY (UPLOADER_ID)
  REFERENCES EMPLOYEES(EMP_ID);

-- 공지
INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('시스템 점검 안내', '오늘 22:00~23:00 점검 예정입니다.', 'admin', '관리자');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('신규 입사자 환영', '다마고치님이 인사팀으로 합류했습니다.', 'admin10', '고군');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('개발 환경 업데이트', 'JDK와 라이브러리 버전이 갱신되었습니다.', 'user02', '이순신');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('보안 수칙 재안내', '비밀번호는 주기적으로 변경해주세요.', 'ddd', 'ddd');

INSERT INTO NOTICES (TITLE, CONTENT, AUTHOR_ID, AUTHOR_NAME)
VALUES ('사내 복지 안내', '점심 식대 지원 정책이 개편되었습니다.', 'rs10000', '마이클');

COMMIT;



